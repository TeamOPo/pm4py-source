import pm4py.algo.discovery.inductive.versions.plain_version.data_structures.subtree_plain.make_tree
from pm4py import util as pmutil
from pm4py.algo.discovery.inductive.util import shared_constants
from pm4py.algo.discovery.inductive.util.petri_el_count import Counts
from pm4py.algo.discovery.inductive.versions.dfg.util import get_tree_repr_imdfb
from pm4py.algo.filtering.log.attributes import attributes_filter
from pm4py.algo.filtering.log.end_activities import end_activities_filter
from pm4py.algo.filtering.log.start_activities import start_activities_filter
from pm4py.algo.discovery.inductive.versions.plain_version.cutting import create_dfg
import sys
from collections import Counter
from pm4py.algo.discovery.dfg.versions import native as dfg_inst
from pm4py.algo.discovery.inductive.versions.dfg.data_structures.subtree_imdfb import SubtreeB
from pm4py.objects.conversion.process_tree import factory as tree_to_petri
from pm4py.objects.log.util import xes as xes_util


def apply_im_plain(log, parameters):

    dfg = create_dfg(log)
    c = Counts()
    noise_threshold = shared_constants.NOISE_THRESHOLD
    if "noiseThreshold" in parameters:
        noise_threshold = parameters["noiseThreshold"]
    activity_key = parameters[pmutil.constants.PARAMETER_CONSTANT_ACTIVITY_KEY]
    activities = attributes_filter.get_attribute_values(log, activity_key)
    start_activities = list(start_activities_filter.get_start_activities(log, parameters=parameters).keys())
    end_activities = list(end_activities_filter.get_end_activities(log, parameters=parameters).keys())
    contains_empty_traces = False
    traces_length = [len(trace) for trace in log]
    if traces_length:
        contains_empty_traces = min([len(trace) for trace in log]) == 0

    sub = (self, log, dfg, master_dfg, initial_dfg, activities, counts, rec_depth)

    #tree_repr = get_tree_repr_imdfb.get_repr(sub, 0, contains_empty_traces=contains_empty_traces)
    #return tree_repr
